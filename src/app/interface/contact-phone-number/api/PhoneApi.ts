/**
 * phone-api
 * Jumia Exercise
 *
 * OpenAPI spec version: 1.0
 * Contact: aya.abdelmaqsoud@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ErrorResponse } from '../model/ErrorResponse';
import { Phone } from '../model/Phone';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { AppConfigService } from '../../../services/app-config.service';


@Injectable()
export class PhoneApi {

    protected basePath ;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration,private environment: AppConfigService) {
        this.basePath = environment.config.url;
     }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Find list of all Phone numbers should be categorized by country 
     * Returns list of Phone numbers
     * @param xCMPTenantId ID of the Tenant
     * @param xCorrelationId Correlation ID for the current external request
     * @param country country
     * @param state state
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPhoneNumbers(xCMPTenantId: string, xCorrelationId: string, country?: string, state?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Phone>>;
    public getPhoneNumbers(xCMPTenantId: string, xCorrelationId: string, country?: string, state?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Phone>>>;
    public getPhoneNumbers(xCMPTenantId: string, xCorrelationId: string, country?: string, state?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Phone>>>;
    public getPhoneNumbers(xCMPTenantId: string, xCorrelationId: string, country?: string, state?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (xCMPTenantId === null || xCMPTenantId === undefined) {
            throw new Error('Required parameter xCMPTenantId was null or undefined when calling getPhoneNumbers.');
        }

        if (xCorrelationId === null || xCorrelationId === undefined) {
            throw new Error('Required parameter xCorrelationId was null or undefined when calling getPhoneNumbers.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (country !== undefined && country !== null) {
            queryParameters = queryParameters.set('country', <any>country);
        }
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('state', <any>state);
        }

        let headers = this.defaultHeaders;
        if (xCMPTenantId !== undefined && xCMPTenantId !== null) {
            headers = headers.set('X-CMP-Tenant-Id', String(xCMPTenantId));
        }
        if (xCorrelationId !== undefined && xCorrelationId !== null) {
            headers = headers.set('X-Correlation-Id', String(xCorrelationId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Phone>>(`${this.basePath}/phoneNumbers/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
